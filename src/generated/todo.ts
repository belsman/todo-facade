// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: todo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "todo";

export interface TodoItem {
  id: number;
  title: string;
  completed: boolean;
}

export interface CreateTodoRequest {
  title: string;
}

export interface GetTodoRequest {
  id: number;
}

export interface ListTodosRequest {
}

export interface ListTodosResponse {
  todos: TodoItem[];
}

export interface UpdateTodoRequest {
  todoItem: TodoItem | undefined;
}

export interface DeleteTodoRequest {
  id: number;
}

export interface DeleteTodoResponse {
  success: boolean;
}

function createBaseTodoItem(): TodoItem {
  return { id: 0, title: "", completed: false };
}

export const TodoItem: MessageFns<TodoItem> = {
  encode(message: TodoItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TodoItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodoItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TodoItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: TodoItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create(base?: DeepPartial<TodoItem>): TodoItem {
    return TodoItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TodoItem>): TodoItem {
    const message = createBaseTodoItem();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.completed = object.completed ?? false;
    return message;
  },
};

function createBaseCreateTodoRequest(): CreateTodoRequest {
  return { title: "" };
}

export const CreateTodoRequest: MessageFns<CreateTodoRequest> = {
  encode(message: CreateTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoRequest {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: CreateTodoRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTodoRequest>): CreateTodoRequest {
    return CreateTodoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTodoRequest>): CreateTodoRequest {
    const message = createBaseCreateTodoRequest();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseGetTodoRequest(): GetTodoRequest {
  return { id: 0 };
}

export const GetTodoRequest: MessageFns<GetTodoRequest> = {
  encode(message: GetTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTodoRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTodoRequest>): GetTodoRequest {
    return GetTodoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTodoRequest>): GetTodoRequest {
    const message = createBaseGetTodoRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseListTodosRequest(): ListTodosRequest {
  return {};
}

export const ListTodosRequest: MessageFns<ListTodosRequest> = {
  encode(_: ListTodosRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTodosRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTodosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListTodosRequest {
    return {};
  },

  toJSON(_: ListTodosRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListTodosRequest>): ListTodosRequest {
    return ListTodosRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListTodosRequest>): ListTodosRequest {
    const message = createBaseListTodosRequest();
    return message;
  },
};

function createBaseListTodosResponse(): ListTodosResponse {
  return { todos: [] };
}

export const ListTodosResponse: MessageFns<ListTodosResponse> = {
  encode(message: ListTodosResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.todos) {
      TodoItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTodosResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTodosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.todos.push(TodoItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTodosResponse {
    return { todos: globalThis.Array.isArray(object?.todos) ? object.todos.map((e: any) => TodoItem.fromJSON(e)) : [] };
  },

  toJSON(message: ListTodosResponse): unknown {
    const obj: any = {};
    if (message.todos?.length) {
      obj.todos = message.todos.map((e) => TodoItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTodosResponse>): ListTodosResponse {
    return ListTodosResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTodosResponse>): ListTodosResponse {
    const message = createBaseListTodosResponse();
    message.todos = object.todos?.map((e) => TodoItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateTodoRequest(): UpdateTodoRequest {
  return { todoItem: undefined };
}

export const UpdateTodoRequest: MessageFns<UpdateTodoRequest> = {
  encode(message: UpdateTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.todoItem !== undefined) {
      TodoItem.encode(message.todoItem, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.todoItem = TodoItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoRequest {
    return { todoItem: isSet(object.todoItem) ? TodoItem.fromJSON(object.todoItem) : undefined };
  },

  toJSON(message: UpdateTodoRequest): unknown {
    const obj: any = {};
    if (message.todoItem !== undefined) {
      obj.todoItem = TodoItem.toJSON(message.todoItem);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTodoRequest>): UpdateTodoRequest {
    return UpdateTodoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTodoRequest>): UpdateTodoRequest {
    const message = createBaseUpdateTodoRequest();
    message.todoItem = (object.todoItem !== undefined && object.todoItem !== null)
      ? TodoItem.fromPartial(object.todoItem)
      : undefined;
    return message;
  },
};

function createBaseDeleteTodoRequest(): DeleteTodoRequest {
  return { id: 0 };
}

export const DeleteTodoRequest: MessageFns<DeleteTodoRequest> = {
  encode(message: DeleteTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTodoRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTodoRequest>): DeleteTodoRequest {
    return DeleteTodoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTodoRequest>): DeleteTodoRequest {
    const message = createBaseDeleteTodoRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteTodoResponse(): DeleteTodoResponse {
  return { success: false };
}

export const DeleteTodoResponse: MessageFns<DeleteTodoResponse> = {
  encode(message: DeleteTodoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTodoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTodoResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteTodoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTodoResponse>): DeleteTodoResponse {
    return DeleteTodoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTodoResponse>): DeleteTodoResponse {
    const message = createBaseDeleteTodoResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type TodoServiceService = typeof TodoServiceService;
export const TodoServiceService = {
  createTodo: {
    path: "/todo.TodoService/CreateTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTodoRequest) => Buffer.from(CreateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateTodoRequest.decode(value),
    responseSerialize: (value: TodoItem) => Buffer.from(TodoItem.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TodoItem.decode(value),
  },
  getTodo: {
    path: "/todo.TodoService/GetTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTodoRequest) => Buffer.from(GetTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTodoRequest.decode(value),
    responseSerialize: (value: TodoItem) => Buffer.from(TodoItem.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TodoItem.decode(value),
  },
  listTodos: {
    path: "/todo.TodoService/ListTodos",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTodosRequest) => Buffer.from(ListTodosRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTodosRequest.decode(value),
    responseSerialize: (value: ListTodosResponse) => Buffer.from(ListTodosResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTodosResponse.decode(value),
  },
  updateTodo: {
    path: "/todo.TodoService/UpdateTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTodoRequest) => Buffer.from(UpdateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateTodoRequest.decode(value),
    responseSerialize: (value: TodoItem) => Buffer.from(TodoItem.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TodoItem.decode(value),
  },
  deleteTodo: {
    path: "/todo.TodoService/DeleteTodo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteTodoRequest) => Buffer.from(DeleteTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteTodoRequest.decode(value),
    responseSerialize: (value: DeleteTodoResponse) => Buffer.from(DeleteTodoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteTodoResponse.decode(value),
  },
} as const;

export interface TodoServiceServer extends UntypedServiceImplementation {
  createTodo: handleUnaryCall<CreateTodoRequest, TodoItem>;
  getTodo: handleUnaryCall<GetTodoRequest, TodoItem>;
  listTodos: handleUnaryCall<ListTodosRequest, ListTodosResponse>;
  updateTodo: handleUnaryCall<UpdateTodoRequest, TodoItem>;
  deleteTodo: handleUnaryCall<DeleteTodoRequest, DeleteTodoResponse>;
}

export interface TodoServiceClient extends Client {
  createTodo(
    request: CreateTodoRequest,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  getTodo(request: GetTodoRequest, callback: (error: ServiceError | null, response: TodoItem) => void): ClientUnaryCall;
  getTodo(
    request: GetTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  getTodo(
    request: GetTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  listTodos(
    request: ListTodosRequest,
    callback: (error: ServiceError | null, response: ListTodosResponse) => void,
  ): ClientUnaryCall;
  listTodos(
    request: ListTodosRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTodosResponse) => void,
  ): ClientUnaryCall;
  listTodos(
    request: ListTodosRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTodosResponse) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TodoItem) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: DeleteTodoRequest,
    callback: (error: ServiceError | null, response: DeleteTodoResponse) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: DeleteTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteTodoResponse) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: DeleteTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteTodoResponse) => void,
  ): ClientUnaryCall;
}

export const TodoServiceClient = makeGenericClientConstructor(TodoServiceService, "todo.TodoService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TodoServiceClient;
  service: typeof TodoServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
